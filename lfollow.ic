// ---- ports: ----
persistent int MOTOR_R = 1;
persistent int MOTOR_L = 2;
persistent int LIGHT = 3; // treated as a motor so we can dim it with PWM
persistent int LSENS = 2;
persistent int RSENS = 3;

// ---- config: ---
persistent int MOTOR_R_SPEED = 100; // adjust these to fix drift
persistent int MOTOR_L_SPEED = 100;
persistent int DEBUG_MODE = 1; //beep to indicate states?

// ----- variables: -----
persistent int LIGHT_POWER = 40; // configure with light_config()
persistent int L_THRESH = 30; //configure with sens_config()
persistent int R_THRESH = 31; //configure with sens_config()

void main() {
    light_on();
    bounce();
}

void closefollow() {
    beep();
    printf("LT: %d\nRT: %d",L_THRESH,R_THRESH);
    sleep(1.5);
    while(!stop_button()) {
        if ((float)(int)seconds() == seconds()) {
            printf("L:%d | R:%d",tapeL(),tapeR());
        }
        if (tapeL() && tapeR()) {
            forward();
        } else if (tapeL() && !tapeR()) {
            left();
        } else if (!tapeL() && tapeR()) {
            right();
        } else if (!tapeL() && !tapeR()) { //we're lost!
            beep();
            // keep going in whatever direction we were going
            // we could have left the maze though, so that'd be good
        }
    }
    ao();
}

// algorithm to "bounce" two widely set sensors off of a line in between them.
// we'll use integer states to keep track of what we're doing.
// Might make too many comparisons to be fast; will optimize if needed.

// when we hit the line with one of the sensors, we turn until both sensors are
// on the line, and then turn the other way until both sensors are on the line,
// and then turn the other way...
// Using states should make saying "turn until we're both on the line again"
// easier, since we need the sensor to leave the line and then get back on it.
int leftFromLine = 0; // turning left from a position wholly on the line
int leftFromBlank = 1; // turning left from a position with sens off the line
int rightFromLine = 2; // sure would be nice if enums were supported...
int rightFromBlank = 3;
int initialFwd = 4; // initial state, we don't know whch way to bounce.
int s; // current state
void bounce() {
    // we start out with the line between the sensors
    forward();
    s = initialFwd;
    if (DEBUG_MODE) { start_process(bounceTones()); }
    while(!stop_button()) {
        if (s == initialFwd) {
            if (tapeL()&tapeR()) {
                beep();
                stop();
                // we're starting near 90 degrees to the path, so we've got like
                // a 50% chance of going off the line entirely.  Let's just quit
                // so we can catch the robot and get back to testing.
            }
            // tapeL()&&tapeR() is invalid here, so we'll just go left if so
            if (tapeL()) {
                s = leftFromLine;
                left();
            } else if (tapeR()) {
                s = rightFromLine;
                right();
            }
        }
        if (s == leftFromLine && !tapeR()) {
            s = leftFromBlank;
        }
        if (s == leftFromBlank && tapeR()) {
            s = rightFromLine;
            right();
        }
        if (s == rightFromLine && !tapeL()) {
            s = rightFromBlank;
        }
        if (s == rightFromBlank && tapeL()) {
            s = leftFromLine;
            left();
        }
    }
}

/// we're in D major!
float tones[] = {293.7, 370.0, 440.0, 554.4, 587.3};
void bounceTones() {
	set_beeper_pitch(tones[s]);
	beeper_on();
	defer();
	while(!stop_button()) {
		set_beeper_pitch(tones[s]);
		defer();
	}
	beeper_off();
}