// ---- ports: ----
persistent int MOTOR_R = 1;
persistent int MOTOR_L = 2;
persistent int LIGHT = 3; // treated as a motor so we can dim it with PWM
persistent int LSENS = 2;
persistent int RSENS = 3;

// ---- config: ---
persistent int MOTOR_R_SPEED = 100; // adjust these to fix drift
persistent int MOTOR_L_SPEED = 100;

// ----- variables: -----
persistent int LIGHT_POWER = 40; // configure with light_config
//norm 40
persistent int L_THRESH = 30; //configure with sens_config
persistent int R_THRESH = 31; //configure with sens_config

void main() {
    beep();
    light_on();
    printf("LT: %d\nRT: %d",L_THRESH,R_THRESH);
    sleep(1.5);
    while(!stop_button()) {
        if ((float)(int)seconds() == seconds()) {
            printf("L:%d | R:%d",tapeL(),tapeR());
        }
        if (tapeL() && tapeR()) {
            forward();
        } else if (tapeL() && !tapeR()) {
            left();
        } else if (!tapeL() && tapeR()) {
            right();
        } else if (!tapeL() && !tapeR()) { //we're lost!
            beep();
            // keep going in whatever direction we were going
            // we could have left the maze though, so that'd be good
        }
    }
    ao();
}

void forward() {
    fdL();
    fdR();
}
void left() {
    fdR();
    off(MOTOR_L);
}
void right() {
    fdL();
    off(MOTOR_R);
}
void fdR() {
    motor(MOTOR_R,MOTOR_R_SPEED);
}
void fdL() {
    motor(MOTOR_L,MOTOR_L_SPEED);
}

int tapeR() {
    return analog(RSENS) < R_THRESH;
}
int tapeL() {
    return analog(LSENS) < L_THRESH;
}

int tapeValL = 0;
int tapeValR = 0;
int offValL = 0;
int offValR = 0;
void sens_config() {
    light_on();
    while(!start_button()) {
        printf("put L over tape\nLSENS = %d",analog(LSENS));
        sleep(.1);
    }
    tapeValL = analog(LSENS);
    beep();
    sleep(1.0);
    
    while(!start_button()) {
        printf("take L off tape\nLSENS = %d",analog(LSENS));
        sleep(.1);}
    offValL = analog(LSENS);
    beep();
    sleep(1.0);
    
    while(!start_button()) {
        printf("put R over tape\nRSENS = %d",analog(RSENS));
        sleep(.1);
    }
    tapeValR = analog(RSENS);
    beep();
    sleep(1.0);
    
    while(!start_button()) {
        printf("take R off tape\nRSENS = %d",analog(RSENS));
        sleep(.1);}
    offValR = analog(RSENS);
    beep();
    sleep(1.0);
    
    L_THRESH = (tapeValL+offValL)/2;
    R_THRESH = (tapeValR+offValR)/2;
    printf("New thresholds:\nL:%d | R: %d",L_THRESH, R_THRESH);
    
}
void light_config() {
    while(!stop_button()) {
        while(!start_button()) {
            printf("LSENS: %d | RSENS: %d\nKNOB: %d",analog(LSENS),analog(RSENS),knob());
            motor(LIGHT,knob());
            //sleep(.5);
            if (stop_button()) {
                    break;
            }
        }
        LIGHT_POWER = knob();
        printf("LPOW set to %d",LIGHT_POWER);
        beep();
        sleep(.5);
    }
    printf("Done.");
}
void light_on() {
    motor(LIGHT,LIGHT_POWER);
}

